import { ClientProxy } from '@nestjs/microservices';
export declare class PortfolioService {
    private readonly PORTFOLIO_SERVICE;
    private readonly UAMService;
    constructor(PORTFOLIO_SERVICE: ClientProxy, UAMService: ClientProxy);
    pingServiceA(): import("rxjs").Observable<any>;
    addStream(body: any): import("rxjs").Observable<any>;
    updateStream(body: any): import("rxjs").Observable<any>;
    fetchStreams(query: any): import("rxjs").Observable<any>;
    addMasterPractice(body: any): import("rxjs").Observable<any>;
    updateMasterPractice(body: any): import("rxjs").Observable<any>;
    fetchMasterPractices(query: any): import("rxjs").Observable<any>;
    addWorkItem(body: any): import("rxjs").Observable<any>;
    updateWorkItem(body: any): import("rxjs").Observable<any>;
    fetchWorkItems(query: any): import("rxjs").Observable<any>;
    addUserWorkItem(body: any): import("rxjs").Observable<any>;
    updateUserWorkItem(body: any): import("rxjs").Observable<any>;
    fetchUserWorkItem(query: any): import("rxjs").Observable<any>;
    addActivity(body: any): import("rxjs").Observable<any>;
    updateActivity(body: any): import("rxjs").Observable<any>;
    fetchActivities(query: any): import("rxjs").Observable<any>;
    fetchUserActivities(query: any): import("rxjs").Observable<any>;
    updateUserActivity(body: any): import("rxjs").Observable<any>;
    addUserActivity(body: any): import("rxjs").Observable<any>;
    fetchActivityGroups(query: any): import("rxjs").Observable<any>;
    addPractice(body: any): import("rxjs").Observable<any>;
    updatePractice(body: any): import("rxjs").Observable<any>;
    fetchPractices(query: any): import("rxjs").Observable<any>;
    addUserPractice(body: any): import("rxjs").Observable<any>;
    updateUserPractice(body: any): import("rxjs").Observable<any>;
    fetchUserPractice(query: any): import("rxjs").Observable<any>;
    addInitiative(body: any): import("rxjs").Observable<any>;
    updateInitiative(body: any): import("rxjs").Observable<any>;
    fetchInitiatives(query: any): import("rxjs").Observable<any>;
    addUserInitiative(body: any): import("rxjs").Observable<any>;
    updateUserInitiative(body: any): import("rxjs").Observable<any>;
    fetchUserInitiatives(query: any): import("rxjs").Observable<any>;
    addScopeArea(body: any): import("rxjs").Observable<any>;
    updateScopeArea(body: any): import("rxjs").Observable<any>;
    fetchScopeAreas(query: any): import("rxjs").Observable<any>;
    addScopeAreaToUser(body: any): import("rxjs").Observable<any>;
    updateUserScopeArea(body: any): import("rxjs").Observable<any>;
    fetchUserScopeAreas(query: any): Promise<any>;
    geInitiativeList(): import("rxjs").Observable<any>;
    addPracticeInitiative(body: any): import("rxjs").Observable<any>;
    updatePracticeInitiative(body: any): import("rxjs").Observable<any>;
    fetchPracticeInitiatives(query: any): import("rxjs").Observable<any>;
    getInitiatives(): import("rxjs").Observable<any>;
    getStages(): import("rxjs").Observable<any>;
    getFeatures(): import("rxjs").Observable<any>;
    getPriorities(): import("rxjs").Observable<any>;
}
